ancova_F        <-  round(ancova[2,"F"], 2)         # where 2 specifies the main effect row
ancova_df_1     <-  round(ancova[2,"df"], 2)        # where 2 specifies the main effect row
ancova_df_2     <-  round(ancova[3,"df"], 2)        # where 3 specifies the residuals row
adjusted_means
ancova_F        <-  round(ancova[2,"F"], 2)         # where 2 specifies the main effect row
ancova_df_1     <-  round(ancova[2,"df"], 2)        # where 2 specifies the main effect row
ancova_df_2     <-  round(ancova[3,"df"], 2)        # where 3 specifies the residuals row
ancova_p        <-  round(ancova[2,"p"], 5)         # where 2 specifies the main effect row
ancova_eta2     <-  round(ancova[2,"eta.sq"], 2)    # where 2 specifies the main effect row
# 90% CI on eta2 (nb 90% not 95%, see Wuensch, 2009; Steiger. 2004)
# from http://daniellakens.blogspot.be/2014/06/calculating-confidence-intervals-for.html
# generically: ci.pvaf(F.value=XX, df.1=XX, df.2=XX, N=XX, conf.level=.90)
# 1. find n
n_df <- summarize(data_df, n_variable = n())
n_integer <- n_df$n_variable
n_df <- summarize(data_df, n_variable = n())
?n()
n_df <- summarize(data_df, n_variable = n())
summarize(data_df, n_variable = n())
n_df <- data_df %>% summarize(n_variable = n())
n_df <- data_df
View(n_df)
View(n_df)
?summarize
n_df <- data_df %>% dplyr::summarize(n_variable = n())
n_integer <- n_df$n_variable
# 2. 90% CIs
ancova_eta2_ci_lower  <- round(ci.pvaf(F.value=ancova_F, df.1=ancova_df_1, df.2=ancova_df_2, N=n_integer, conf.level=.90)$Lower.Limit.Proportion.of.Variance.Accounted.for, 2)
ancova_eta2_ci_upper  <- round(ci.pvaf(F.value=ancova_F, df.1=ancova_df_1, df.2=ancova_df_2, N=n_integer, conf.level=.90)$Upper.Limit.Proportion.of.Variance.Accounted.for, 2)
# NHST
if (ancova_p < 0.05) {
significance    <- "A main effect for condition was found: after controlling for time point 1 scores, scores at time point 2 were significantly different between "
} else {
significance    <- "No main effect for condition was found: after controlling for time point 1 scores, no significant differences were found between "
}
# round p values using APA rules
if (ancova_p < 0.001) {
ancova_p_APA_format <- "< .001"
} else if (ancova_p < 0.01) {
ancova_p_APA_format <- paste("= ", rd(ancova_p, 3), sep = "")  # rd() rounds, converts to string, and removes the leading 0.
} else {
ancova_p_APA_format <- paste("= ", rd(ancova_p, 2), sep = "")
}
# descriptive stats
adjusted_mean_condition_a   <- round(data.frame(adjusted_means)[["fit"]][[1]], 2)
adjusted_mean_condition_b   <- round(data.frame(adjusted_means)[["fit"]][[2]], 2)
# NB: sd = se * sqrt(n)
adjusted_sd_condition_a     <- round(data.frame(adjusted_means)[["se"]][[1]] * sqrt(n_condition_a), 2)
adjusted_sd_condition_b     <- round(data.frame(adjusted_means)[["se"]][[2]] * sqrt(n_condition_b), 2)
########################################################################
## report stats
acnova_setup <- "An ANCOVA was conducted with time point 2 as the DV, condition as the IV, and time point 1 as a covariate. "
ancova_output <- paste(", F(", ancova_df_1, ", ", ancova_df_2, ") = ", ancova_F, ", p ", ancova_p_APA_format, ", η2 = ", ancova_eta2, ", 90% CI [", ancova_eta2_ci_lower, ", ", ancova_eta2_ci_upper, "]. ", sep = "")
acnova_setup <- "An ANCOVA was conducted with time point 2 as the DV, condition as the IV, and time point 1 as a covariate. "
ancova_output <- paste(", F(", ancova_df_1, ", ", ancova_df_2, ") = ", ancova_F, ", p ", ancova_p_APA_format, ", η2 = ", ancova_eta2, ", 90% CI [", ancova_eta2_ci_lower, ", ", ancova_eta2_ci_upper, "]. ", sep = "")
# descriptive stats output
desc_condition_A <- paste("condition A (n = ", n_condition_a, ", adjusted M = ", adjusted_mean_condition_a, ", SD = ", adjusted_sd_condition_a, ")", sep = "")
desc_condition_B <- paste("condition B (n = ", n_condition_b, ", adjusted M = ", adjusted_mean_condition_b, ", SD = ", adjusted_sd_condition_b, ")", sep = "")
## final summary
ancova_output_and_interpretation <- paste(acnova_setup, significance, desc_condition_A, " and ", desc_condition_B, ancova_output, sep = "")
## write to disk
sink("output ANCOVA.txt")
cat(ancova_output_and_interpretation)  # cat() supresses the line number from being printed
sink()
?cohen.d
?t.test
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(effsize)
library(psych)  # for describeBy()
library(weights)  # for rd(), a round() alternative
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
View(data_df)
View(data_df)
t_test <- t.test(timepoint_1, timepoint_2,
data = data_df,
alternative = "two.sided",
paired = TRUE)
# effect size
cohens_d <- cohen.d(timepoint_1, timepoint_2,
data = data_df,
paired = TRUE)
# descriptive stats by cell
descriptives <-
data_df %>%
select(condition, timepoint_1, timepoint_2) %>%
describe(fast=TRUE,  # subset of descriptive stats
ranges = FALSE,
trim=0)
?t.test
t_test <- t.test(data_df$timepoint_1, data_df$timepoint_2,
#data = data_df,
alternative = "two.sided",
paired = TRUE)
t_test
plot(t_test)
t_test <- t.test(timepoint_1, timepoint_2,
alternative = "two.sided",
paired = TRUE,
data = data_df)
t_test <- t.test(x = timepoint_1,
y = timepoint_2,
alternative = "two.sided",
paired = TRUE,
data = data_df)
t_test <- t.test(x = data_df$timepoint_1,
y = data_df$timepoint_2,
alternative = "two.sided",
paired = TRUE,
data = data_df)
t_test
cohens_d <- cohen.d(timepoint_1, timepoint_2,
data = data_df,
paired = TRUE)
cohen.d
?cohen.d
cohens_d <- cohen.d(d = data_df$timepoint_1,
f = data_df$timepoint_2,
data = data_df,
paired = TRUE)
descriptives <-
data_df %>%
select(condition, timepoint_1, timepoint_2) %>%
describe(fast=TRUE,  # subset of descriptive stats
ranges = FALSE,
trim=0)
descriptives
descriptives
descriptives
?describe
descriptives <-
data_df %>%
select(condition, timepoint_1, timepoint_2) %>%
psych::describe(fast=TRUE,  # subset of descriptive stats
ranges = FALSE,
trim=0)
descriptives
t_test_est <- round(t_test$statistic[[1]], 2)
t_test_df <- round(t_test$parameter[[1]], 2)
t_test_p <- round(t_test$p.value[[1]], 5)
# effect size
d_est <- round(cohens_d$estimate[[1]], 2)
d_ci_lower <- round(cohens_d$conf.int[["inf"]], 2)
d_ci_upper <- round(cohens_d$conf.int[["sup"]], 2)
d_interpretation <- cohens_d$magnitude[[1]]
# round p values using APA rules
if (t_test_p < 0.001) {
t_test_p_APA_format <- "< .001"
} else if (t_test_p < 0.01) {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 3), sep = "")  # rd() rounds, converts to string, and removes the leading 0.
} else {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 2), sep = "")
}
# NHST
if (t_test_p < 0.05) {
significance <- paste("An independent t test demonstrated significant differences of ", d_interpretation, " effect size between ", sep = "")
} else {
significance <- "An independent t test demonstrated no significant differences between "
}
if (t_test_p < 0.05) {
significance <- paste("A dependent t test demonstrated significant differences of ", d_interpretation, " effect size between ", sep = "")
} else {
significance <- "A dependent t test demonstrated no significant differences between "
}
# descriptive stats
mean_condition_a <- round(descriptives[[1]][["mean"]][[2]], 2)
mean_condition_b <- round(descriptives[[2]][["mean"]][[2]], 2)
mean_condition_a <- round(descriptives[[1]]
mean_condition_a <- round(descriptives[[1]]
mean_condition_a <- round(descriptives[[1]], 2)
descriptives
mean_condition_a <- descriptives[[1]][["mean"]][[2]]
mean_condition_a <- descriptives[[1]][["mean"]]
mean_condition_a <- descriptives[["mean"]]
mean_condition_a <- round(descriptives[["mean"]][[2]], 2)
mean_condition_b <- round(descriptives[["mean"]][[2]], 2)
sd_condition_a <- round(descriptives[["sd"]][[2]], 2)
sd_condition_b <- round(descriptives[["sd"]][[2]], 2)
n_condition_a <- round(descriptives[["n"]][[2]], 2)
n_condition_b <- round(descriptives[["n"]][[2]], 2)
mean_condition_a
mean_condition_b
mean_condition_a <- round(descriptives[["mean"]][[2]], 2)
mean_condition_b <- round(descriptives[["mean"]][[3]], 2)
sd_condition_a <- round(descriptives[["sd"]][[2]], 2)
sd_condition_b <- round(descriptives[["sd"]][[3]], 2)
n_condition_a <- round(descriptives[["n"]][[2]], 2)
n_condition_b <- round(descriptives[["n"]][[3]], 2)
mean_condition_a
mean_condition_b
sd_condition_a
sd_condition_b
n_condition_a
n_condition_b
n <- round(descriptives[["n"]][[2]], 2)
n
mean_timepoint_1 <- round(descriptives[["mean"]][[2]], 2)
mean_timepoint_2 <- round(descriptives[["mean"]][[3]], 2)
sd_timepoint_1 <- round(descriptives[["sd"]][[2]], 2)
sd_timepoint_2 <- round(descriptives[["sd"]][[3]], 2)
mean_timepoint_1 <- round(descriptives[["mean"]][[2]], 2)
mean_timepoint_2 <- round(descriptives[["mean"]][[3]], 2)
sd_timepoint_1 <- round(descriptives[["sd"]][[2]], 2)
sd_timepoint_2 <- round(descriptives[["sd"]][[3]], 2)
########################################################################
## report stats
# t test and d
t_test_and_d_output <- paste(", t(", t_test_df, ") = ", t_test_est, ", p ", t_test_p_APA_format, ", d = ", d_est, ", 95% CI [", d_ci_lower, ", ", d_ci_upper, "]. ", sep = "")
# descriptive stats
descriptives_timepoint_1_output <- paste("time point 1 (M = ", mean_condition_a, ", SD = ", sd_condition_a, ")", sep = "")
descriptives_timepoint_2_output <- paste("time point 2 (M = ", mean_condition_b, ", SD = ", sd_condition_b, ")", sep = "")
## final summary
t_test_output_and_interpretation <- paste(significance, descriptives_condition_a_output, " and ", descriptives_condition_b_output, t_test_and_d_output, sep = "")
t_test_output_and_interpretation <- paste(significance, descriptives_timepoint_1_output, " and ", descriptives_timepoint_2_output, t_test_and_d_output, sep = "")
t_test_output_and_interpretation
########################################################################
# Automated reporting of a dependent t test and cohen's d
# for use in knittr scripts
# Ian Hussey (ian.hussey@ugent.be)
# output checked against results returned by JASP
# usage:
# 1. customise the working directory line, containing setwd() below
# 2. run script
# to do:
# report if one sided ttest
########################################################################
# Clean workspace
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(effsize)
library(psych)  # for describeBy()
library(weights)  # for rd(), a round() alternative
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
t_test <- t.test(x = data_df$timepoint_1,
y = data_df$timepoint_2,
alternative = "two.sided",
paired = TRUE,
data = data_df)
# effect size
cohens_d <- cohen.d(d = data_df$timepoint_1,
f = data_df$timepoint_2,
data = data_df,
paired = TRUE)
# descriptive stats by cell
descriptives <-
data_df %>%
select(condition, timepoint_1, timepoint_2) %>%
psych::describe(fast=TRUE,  # subset of descriptive stats
ranges = FALSE,
trim=0)
########################################################################
## extract individual stats
# t test
t_test_est <- round(t_test$statistic[[1]], 2)
t_test_df <- round(t_test$parameter[[1]], 2)
t_test_p <- round(t_test$p.value[[1]], 5)
# effect size
d_est <- round(cohens_d$estimate[[1]], 2)
d_ci_lower <- round(cohens_d$conf.int[["inf"]], 2)
d_ci_upper <- round(cohens_d$conf.int[["sup"]], 2)
d_interpretation <- cohens_d$magnitude[[1]]
# round p values using APA rules
if (t_test_p < 0.001) {
t_test_p_APA_format <- "< .001"
} else if (t_test_p < 0.01) {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 3), sep = "")  # rd() rounds, converts to string, and removes the leading 0.
} else {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 2), sep = "")
}
# NHST
if (t_test_p < 0.05) {
significance <- paste("A dependent t test demonstrated significant differences of ", d_interpretation, " effect size between ", sep = "")
} else {
significance <- "A dependent t test demonstrated no significant differences between "
}
# descriptive stats
mean_timepoint_1 <- round(descriptives[["mean"]][[2]], 2)
mean_timepoint_2 <- round(descriptives[["mean"]][[3]], 2)
sd_timepoint_1 <- round(descriptives[["sd"]][[2]], 2)
sd_timepoint_2 <- round(descriptives[["sd"]][[3]], 2)
########################################################################
## report stats
# t test and d
t_test_and_d_output <- paste(", t(", t_test_df, ") = ", t_test_est, ", p ", t_test_p_APA_format, ", d = ", d_est, ", 95% CI [", d_ci_lower, ", ", d_ci_upper, "]. ", sep = "")
# descriptive stats
descriptives_timepoint_1_output <- paste("time point 1 (M = ", mean_condition_a, ", SD = ", sd_condition_a, ")", sep = "")
descriptives_timepoint_2_output <- paste("time point 2 (M = ", mean_condition_b, ", SD = ", sd_condition_b, ")", sep = "")
## final summary
t_test_output_and_interpretation <- paste(significance, descriptives_timepoint_1_output, " and ", descriptives_timepoint_2_output, t_test_and_d_output, sep = "")
## write to disk
sink("output t test dependent.txt")
cat(t_test_output_and_interpretation)  # cat() supresses the line number from being printed
sink()
########################################################################
# Automated reporting of a dependent t test and cohen's d
# for use in knittr scripts
# Ian Hussey (ian.hussey@ugent.be)
# output checked against results returned by JASP
# usage:
# 1. customise the working directory line, containing setwd() below
# 2. run script
# to do:
# report if one sided ttest
########################################################################
# Clean workspace
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(effsize)
library(psych)  # for describeBy()
library(weights)  # for rd(), a round() alternative
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
t_test <- t.test(x = data_df$timepoint_1,
y = data_df$timepoint_2,
alternative = "two.sided",
paired = TRUE,
data = data_df)
# effect size
cohens_d <- cohen.d(d = data_df$timepoint_1,
f = data_df$timepoint_2,
data = data_df,
paired = TRUE)
# descriptive stats by cell
descriptives <-
data_df %>%
select(condition, timepoint_1, timepoint_2) %>%
psych::describe(fast=TRUE,  # subset of descriptive stats
ranges = FALSE,
trim=0)
########################################################################
## extract individual stats
# t test
t_test_est <- round(t_test$statistic[[1]], 2)
t_test_df <- round(t_test$parameter[[1]], 2)
t_test_p <- round(t_test$p.value[[1]], 5)
# effect size
d_est <- round(cohens_d$estimate[[1]], 2)
d_ci_lower <- round(cohens_d$conf.int[["inf"]], 2)
d_ci_upper <- round(cohens_d$conf.int[["sup"]], 2)
d_interpretation <- cohens_d$magnitude[[1]]
# round p values using APA rules
if (t_test_p < 0.001) {
t_test_p_APA_format <- "< .001"
} else if (t_test_p < 0.01) {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 3), sep = "")  # rd() rounds, converts to string, and removes the leading 0.
} else {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 2), sep = "")
}
# NHST
if (t_test_p < 0.05) {
significance <- paste("A dependent t test demonstrated significant differences of ", d_interpretation, " effect size between ", sep = "")
} else {
significance <- "A dependent t test demonstrated no significant differences between "
}
# descriptive stats
mean_timepoint_1 <- round(descriptives[["mean"]][[2]], 2)
mean_timepoint_2 <- round(descriptives[["mean"]][[3]], 2)
sd_timepoint_1 <- round(descriptives[["sd"]][[2]], 2)
sd_timepoint_2 <- round(descriptives[["sd"]][[3]], 2)
########################################################################
## report stats
# t test and d
t_test_and_d_output <- paste(", t(", t_test_df, ") = ", t_test_est, ", p ", t_test_p_APA_format, ", d = ", d_est, ", 95% CI [", d_ci_lower, ", ", d_ci_upper, "]. ", sep = "")
# descriptive stats
descriptives_timepoint_1_output <- paste("time point 1 (M = ", mean_condition_a, ", SD = ", sd_condition_a, ")", sep = "")
descriptives_timepoint_2_output <- paste("time point 2 (M = ", mean_condition_b, ", SD = ", sd_condition_b, ")", sep = "")
## final summary
t_test_output_and_interpretation <- paste(significance, descriptives_timepoint_1_output, " and ", descriptives_timepoint_2_output, t_test_and_d_output, sep = "")
## write to disk
sink("output t test dependent.txt")
cat(t_test_output_and_interpretation)  # cat() supresses the line number from being printed
sink()
########################################################################
# Automated reporting of a dependent t test and cohen's d
# for use in knittr scripts
# Ian Hussey (ian.hussey@ugent.be)
# output checked against results returned by JASP
# usage:
# 1. customise the working directory line, containing setwd() below
# 2. run script
# to do:
# report if one sided ttest
########################################################################
# Clean workspace
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(effsize)
library(psych)  # for describeBy()
library(weights)  # for rd(), a round() alternative
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
t_test <- t.test(x = data_df$timepoint_1,
y = data_df$timepoint_2,
alternative = "two.sided",
paired = TRUE,
data = data_df)
# effect size
cohens_d <- cohen.d(d = data_df$timepoint_1,
f = data_df$timepoint_2,
data = data_df,
paired = TRUE)
# descriptive stats by cell
descriptives <-
data_df %>%
select(condition, timepoint_1, timepoint_2) %>%
psych::describe(fast=TRUE,  # subset of descriptive stats
ranges = FALSE,
trim=0)
########################################################################
## extract individual stats
# t test
t_test_est <- round(t_test$statistic[[1]], 2)
t_test_df <- round(t_test$parameter[[1]], 2)
t_test_p <- round(t_test$p.value[[1]], 5)
# effect size
d_est <- round(cohens_d$estimate[[1]], 2)
d_ci_lower <- round(cohens_d$conf.int[["inf"]], 2)
d_ci_upper <- round(cohens_d$conf.int[["sup"]], 2)
d_interpretation <- cohens_d$magnitude[[1]]
# round p values using APA rules
if (t_test_p < 0.001) {
t_test_p_APA_format <- "< .001"
} else if (t_test_p < 0.01) {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 3), sep = "")  # rd() rounds, converts to string, and removes the leading 0.
} else {
t_test_p_APA_format <- paste("= ", rd(t_test_p, 2), sep = "")
}
# NHST
if (t_test_p < 0.05) {
significance <- paste("A dependent t test demonstrated significant differences of ", d_interpretation, " effect size between ", sep = "")
} else {
significance <- "A dependent t test demonstrated no significant differences between "
}
# descriptive stats
mean_timepoint_1 <- round(descriptives[["mean"]][[2]], 2)
mean_timepoint_2 <- round(descriptives[["mean"]][[3]], 2)
sd_timepoint_1 <- round(descriptives[["sd"]][[2]], 2)
sd_timepoint_2 <- round(descriptives[["sd"]][[3]], 2)
########################################################################
## report stats
# t test and d
t_test_and_d_output <- paste(", t(", t_test_df, ") = ", t_test_est, ", p ", t_test_p_APA_format, ", d = ", d_est, ", 95% CI [", d_ci_lower, ", ", d_ci_upper, "]. ", sep = "")
# descriptive stats
descriptives_timepoint_1_output <- paste("time point 1 (M = ", mean_timepoint_1, ", SD = ", sd_timepoint_1, ")", sep = "")
descriptives_timepoint_2_output <- paste("time point 2 (M = ", mean_timepoint_2, ", SD = ", sd_timepoint_2, ")", sep = "")
## final summary
t_test_output_and_interpretation <- paste(significance, descriptives_timepoint_1_output, " and ", descriptives_timepoint_2_output, t_test_and_d_output, sep = "")
## write to disk
sink("output t test dependent.txt")
cat(t_test_output_and_interpretation)  # cat() supresses the line number from being printed
sink()
t_test_output_and_interpretation
install.packages("grt")
library(grt)
?`grt-package`
op <- par(mfcol = c(3, 3), pty = "m", mai = c(0,0,0,0))
for(i in c(.85, .21, .06)){
for(j in c(1/6, 1/7, 1/8)){
gaborPatch(20, pc = i, sigma = j)
}
}
par(op)
m  <-  list(c(268, 157), c(332, 93))
covs  <-  matrix(c(4538, 4351, 4351, 4538), ncol = 2)
II <- grtrnorm(n = 40, np = 2, means = m, covs = covs,
clip.sd = 4, seed = 1234)
II$sf <- .25+(II$x1/50)
II$theta <- II$x2*(18/50)
plot(II[,2:3], xlim = c(-100,600), ylim = c(-200,500),
pch = 21, bg = c("white","gray")[II$category])
abline(a = -175, b = 1)
library(Hmisc)
idx <- c(20, 31, 35, 49, 62)
xpos <- c(0, 100, 300, 350, 550)
ypos <- c(50, 300, 420, -120, 50)
for(i in 1:5)
{
j = idx[i]
segments(x0=II[j,"x1"], y0=II[j,"x2"], x1=xpos[i], y1=ypos[i])
subplot(gaborPatch(sf=II[j,"sf"], theta=II[j,"theta"]), x=xpos[i], y=ypos[i])
}
gaborPatch(20, pc = .85, sigma = 1/6)
gaborPatch(20, pc = .99, sigma = 1/6)
gaborPatch(20, pc = .09, sigma = 1/6)
gaborPatch(20, pc = .09, sigma = 1/4)
