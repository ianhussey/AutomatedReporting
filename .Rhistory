filter(lexicon == "bing") %>%
select(-score)
comment_sentiment <-
stop_words_removed %>%
inner_join(bing) %>%
count(line_number, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>%
left_join(words_per_comment) %>%
mutate(percent_positive = round(positive/n, 3)*100,
percent_negative = round(negative/n, 3)*100,
percent_sentiment = round(sentiment/n, 3)*100,
zero = 0) %>%
filter(n >= 3)
n_all_comments <- nrow(distinct(stop_words_removed, line_number))  # count comments being analysed
word_cooccurences <-
stop_words_removed %>%
pair_count(line_number, word, sort = TRUE) %>%  # warning message suggests use pairwise_count from widyr instead
mutate(percent_of_comments = round((n/n_all_comments)*100, 2))
# Kernel Density Plot of coocurrances
#density <- density(word_cooccurences$n)
#plot(density)
library(igraph)  # masks many dplyr functions so will only be loaded here
library(ggraph)
set.seed(1813)
word_cooccurences %>%
filter(percent_of_comments >= 4) %>%  # must cooccur in x percent of comments
graph_from_data_frame() %>%  # from igraph
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = percent_of_comments, edge_width = percent_of_comments)) +
geom_node_point(color = "darkslategray4", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8) +
ggtitle(expression("Word co-occurance network - 4% threshold")) +
theme_void()
set.seed(1813)
word_cooccurences %>%
filter(percent_of_comments >= 4) %>%  # must cooccur in x percent of comments
graph_from_data_frame() %>%  # from igraph
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = percent_of_comments, edge_width = percent_of_comments)) +
geom_node_point(color = "darkslategray4", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8) +
ggtitle(expression("Word co-occurance network - 4% threshold"))
set.seed(1813)
word_cooccurences %>%
filter(percent_of_comments >= 4) %>%  # must cooccur in x percent of comments
graph_from_data_frame() %>%  # from igraph
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = percent_of_comments, edge_width = percent_of_comments)) +
geom_node_point(color = "darkslategray4", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8) +
ggtitle(expression("Word co-occurance network - 4% threshold")) +
theme_void()
install.packages("devtools")
devtools::install_github("rasmusab/bayesian_first_aid")
install.packages("BEST")
install.packages("rjags")
library(rjags)
library(BEST)
?t.test
library(pwr)
pwr.t.test(n = NULL,  # NB use wr.t2n.test() for different Ns between groups
d = 0.3,
sig.level = 0.05,
power = 0.8,
alternative = "greater")  # one tailed
library(pwr)
pwr.t.test(n = NULL,
d = 0.5,
sig.level = 0.05,
power = 0.8,
alternative = "greater") # one tailed
library(pwr)
pwr.t.test(n = NULL,
d = 0.4,
sig.level = 0.05,
power = 0.8,
alternative = "greater") # one tailed
library(pwr)
pwr.t.test(n = NULL,
d = 0.5,
sig.level = 0.05,
power = 0.8,
alternative = "greater") # one tailed
library(pwr)
pwr.t.test(n = NULL,
d = 0.5,
sig.level = 0.05,
power = 0.95,
alternative = "greater") # one tailed
library(pwr)
pwr.t.test(n = NULL,
d = 0.3,
sig.level = 0.05,
power = 0.95,
alternative = "greater") # one tailed
library(pwr)
pwr.t.test(n = NULL,
d = 0.5,
sig.level = 0.05,
power = 0.8,
alternative = "greater") # one tailed
library(pwr)
pwr.t.test(n = NULL,
d = 0.5,
sig.level = 0.05,
power = 0.8,
alternative = "greater") # one tailed`
pwr.t.test(n = NULL,
+            d = 0.8,
+            sig.level = 0.05,
+            power = 0.8,
+            alternative = "greater") # one tailed`
pwr.t.test(n = NULL,
d = 0.8,
sig.level = 0.05,
power = 0.8,
alternative = "greater") # one tailed`
install.packages("cocron")
?cocron
library(cocron)
?cocron
install.packages("equivalence")
library(equivalence)
?equivalence
data(ufc)
tost(ufc$Height.m.p, ufc$Height.m, epsilon = 1)
equivalence.xyplot(ufc.ht$Height.m ~ ufc.ht$Height.m.p,
alpha=0.05, b0.ii=0.1, b1.ii=0.2,
xlab="Predicted height (m)",
ylab="Measured height (m)")
View(ufc)
View(ufc)
library(BayesFactor)
?ttestBF
library(dplyr)
?%>%
library(purrr)
?purrr
install.packages("schoRsch")
library(schoRsch)
?schoRsch
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(tidyr)
library(ez)
library(schoRsch)
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
# reshape data for analysis
reshaped_df <-
data_df %>%
gather(timepoint,
outcome_variable,
c(timepoint_1, timepoint_2))
#convert participant code to factor
reshaped_df$participant <- factor(reshaped_df$participant)
anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3)
reshaped_df$timepoint <- factor(reshaped_df$timepoint)
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
# reshape data for analysis
reshaped_df <-
data_df %>%
gather(timepoint,
outcome_variable,
c(timepoint_1, timepoint_2))
#convert participant code to factor
reshaped_df$participant <- factor(reshaped_df$participant)
reshaped_df$timepoint <- factor(reshaped_df$timepoint)
# 2X2 mixed within-between anova
anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3)
anova
anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3)
anova2 <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 2)
anova
anova2
anova_out(my_anova,
print = TRUE,
sph.cor = "no",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
my_anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3)
anova_out(my_anova,
print = TRUE,
sph.cor = "no",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
my_anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3,
detailed = TRUE)
my_anova
my_anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3,
detailed = FALSE)
my_anova
my_anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3,
detailed = TRUE)
anova_out(my_anova,
print = TRUE,
sph.cor = "no",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
anova_out(my_anova,
print = TRUE,
sph.cor = "GG",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
my_anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3,
detailed = TRUE)
my_anova_ouptut <- anova_out(my_anova,
print = TRUE,
sph.cor = "GG",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
my_anova_ouptut <- anova_out(my_anova,
print = TRUE,
sph.cor = "GG",
mau.p = 0.05,
etasq = "partial",
dfsep = ", <")
my_anova_ouptut
my_anova_ouptut <- anova_out(my_anova,
print = TRUE,
sph.cor = "GG",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[Effect == "condition:timepoint"]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[1]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[1]
my_anova_ouptut
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text
my_anova_ouptut$`--- ANOVA RESULTS     ------------------------------------`$Effect[4]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[4]
my_anova_ouptut$`--- ANOVA RESULTS     ------------------------------------`$Effect[[4]]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[[4]]
x <- my_anova_ouptut$`--- ANOVA RESULTS     ------------------------------------`$Effect[[4]]
y <- my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[[4]]
x
y
y <- my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[[4]][1]
y
y <- my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[[4]][[1]]
y
x <- my_anova_ouptut$`--- ANOVA RESULTS     ------------------------------------`$Effect[4]
y <- my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text[4]
x
x <- my_anova_ouptut$`--- ANOVA RESULTS     ------------------------------------`$Effect
x
y <- my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text
y
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text
my_anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3,
detailed = TRUE)
my_anova_ouptut <- anova_out(my_anova,
print = TRUE,
sph.cor = "GG",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
my_anova_ouptut$`--- ANOVA RESULTS     ------------------------------------`$Effect
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[1]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[2]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[2,4]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[2][4]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[2][[4]]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[4,2]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[2,4]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`[4,2]
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`
my_anova_ouptut
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text
my_anova <- ezANOVA(data = reshaped_df,
dv = outcome_variable,
within = timepoint,
between = condition,
wid = participant,
type = 3,
detailed = TRUE)
my_anova_ouptut <- anova_out(my_anova,
print = TRUE,
sph.cor = "GG",
mau.p = 0.05,
etasq = "partial",
dfsep = ", ")
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`$Text
my_anova_ouptut
my_anova_ouptut$`--- FORMATTED RESULTS ------------------------------------`
########################################################################
# Automated reporting of an independent t test and cohen's d
########################################################################
# Clean workspace
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(effsize)
library(weights)  # for rd(), a round() alternative
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
t_test <- t.test(formula = change_score ~ condition,  # IV ~ DV adjusted here
data = data_df,
alternative = "two.sided",
paired = FALSE)
t_out <- t_test(toutput,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
library(schoRsch)  # for automated reporting of ez output
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
t_test <- t.test(formula = change_score ~ condition,  # IV ~ DV adjusted here
data = data_df,
alternative = "two.sided",
paired = FALSE)
t_out <- t_test(toutput,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
my_t_test <- t.test(formula = change_score ~ condition,  # IV ~ DV adjusted here
data = data_df,
alternative = "two.sided",
paired = FALSE)
t_out <- t_test(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(effsize)
library(weights)  # for rd(), a round() alternative
library(schoRsch)  # for automated reporting of ez output
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
my_t_test <- t.test(formula = change_score ~ condition,  # IV ~ DV adjusted here
data = data_df,
alternative = "two.sided",
paired = FALSE)
t_out <- t_test(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
?t_out
my_t_test <- t.test(formula = change_score ~ condition,  # IV ~ DV adjusted here
data = data_df,
alternative = "two.sided",
paired = FALSE)
schoRsch::my_t_test_output <- t_out(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
my_t_test_output <- schoRsch::t_out(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
my_t_test_output <- t_out(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
my_t_test_output <- t_out(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = FALSE,
print = TRUE)
?t.test
rm(list=ls())
########################################################################
# dependencies
library(dplyr)
library(effsize)
library(weights)  # for rd(), a round() alternative
library(schoRsch)  # for automated reporting of ez output
########################################################################
# data acquisition
setwd("~/git/Automated Reporting/")
data_df <- read.csv("dataset.csv")
########################################################################
## tests
# t test
my_t_test <- t.test(formula = change_score ~ condition,  # IV ~ DV adjusted here
data = data_df,
alternative = "two.sided",
paired = FALSE)
my_t_test_output <- t_out(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = FALSE,
print = TRUE)
# effect size
?t_out
# t test
my_t_test <- t.test(formula = change_score ~ condition,  # IV ~ DV adjusted here
data = data_df,
alternative = "two.sided",
paired = FALSE)
my_t_test_output <- t_out(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = TRUE,
print = TRUE)
my_t_test_output <- t_out(my_t_test,
n.equal = TRUE,
welch.df.exact = TRUE,
welch.n = NA,
d.corr = FALSE,
print = TRUE)
cohens_d <- cohen.d(change_score ~ condition,
data = data_df,
paired = FALSE)
cohens_d
